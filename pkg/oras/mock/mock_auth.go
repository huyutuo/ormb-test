// Code generated by MockGen. DO NOT EDIT.
// Source: vendor/github.com/deislabs/oras/pkg/auth/client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	remotes "github.com/containerd/containerd/remotes"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Login mocks base method
func (m *MockClient) Login(ctx context.Context, hostname, username, secret string, insecure bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, hostname, username, secret, insecure)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login
func (mr *MockClientMockRecorder) Login(ctx, hostname, username, secret, insecure interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockClient)(nil).Login), ctx, hostname, username, secret, insecure)
}

// Logout mocks base method
func (m *MockClient) Logout(ctx context.Context, hostname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, hostname)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout
func (mr *MockClientMockRecorder) Logout(ctx, hostname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockClient)(nil).Logout), ctx, hostname)
}

// Resolver mocks base method
func (m *MockClient) Resolver(ctx context.Context, client *http.Client, plainHTTP bool) (remotes.Resolver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolver", ctx, client, plainHTTP)
	ret0, _ := ret[0].(remotes.Resolver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolver indicates an expected call of Resolver
func (mr *MockClientMockRecorder) Resolver(ctx, client, plainHTTP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolver", reflect.TypeOf((*MockClient)(nil).Resolver), ctx, client, plainHTTP)
}
