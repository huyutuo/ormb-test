// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/oras/orasclient/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	content "github.com/containerd/containerd/content"
	remotes "github.com/containerd/containerd/remotes"
	oras "github.com/deislabs/oras/pkg/oras"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/opencontainers/image-spec/specs-go/v1"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Push mocks base method
func (m *MockInterface) Push(ctx context.Context, resolver remotes.Resolver, ref string, provider content.Provider, descriptors []v1.Descriptor, opts ...oras.PushOpt) (v1.Descriptor, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, resolver, ref, provider, descriptors}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Push", varargs...)
	ret0, _ := ret[0].(v1.Descriptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Push indicates an expected call of Push
func (mr *MockInterfaceMockRecorder) Push(ctx, resolver, ref, provider, descriptors interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, resolver, ref, provider, descriptors}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockInterface)(nil).Push), varargs...)
}

// Pull mocks base method
func (m *MockInterface) Pull(ctx context.Context, resolver remotes.Resolver, ref string, ingester content.Ingester, opts ...oras.PullOpt) (v1.Descriptor, []v1.Descriptor, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, resolver, ref, ingester}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Pull", varargs...)
	ret0, _ := ret[0].(v1.Descriptor)
	ret1, _ := ret[1].([]v1.Descriptor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Pull indicates an expected call of Pull
func (mr *MockInterfaceMockRecorder) Pull(ctx, resolver, ref, ingester interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, resolver, ref, ingester}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockInterface)(nil).Pull), varargs...)
}
