// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/oras/cache/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	content "github.com/containerd/containerd/content"
	content0 "github.com/deislabs/oras/pkg/content"
	gomock "github.com/golang/mock/gomock"
	model "github.com/kleveross/ormb/pkg/model"
	oci "github.com/kleveross/ormb/pkg/oci"
	cache "github.com/kleveross/ormb/pkg/oras/cache"
	v1 "github.com/opencontainers/image-spec/specs-go/v1"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// FetchReference mocks base method
func (m *MockInterface) FetchReference(ref *oci.Reference) (*cache.CacheRefSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchReference", ref)
	ret0, _ := ret[0].(*cache.CacheRefSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchReference indicates an expected call of FetchReference
func (mr *MockInterfaceMockRecorder) FetchReference(ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchReference", reflect.TypeOf((*MockInterface)(nil).FetchReference), ref)
}

// StoreReference mocks base method
func (m_2 *MockInterface) StoreReference(ref *oci.Reference, m *model.Model) (*cache.CacheRefSummary, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "StoreReference", ref, m)
	ret0, _ := ret[0].(*cache.CacheRefSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreReference indicates an expected call of StoreReference
func (mr *MockInterfaceMockRecorder) StoreReference(ref, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreReference", reflect.TypeOf((*MockInterface)(nil).StoreReference), ref, m)
}

// DeleteReference mocks base method
func (m *MockInterface) DeleteReference(ref *oci.Reference) (*cache.CacheRefSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReference", ref)
	ret0, _ := ret[0].(*cache.CacheRefSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReference indicates an expected call of DeleteReference
func (mr *MockInterfaceMockRecorder) DeleteReference(ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReference", reflect.TypeOf((*MockInterface)(nil).DeleteReference), ref)
}

// ListReferences mocks base method
func (m *MockInterface) ListReferences() ([]*cache.CacheRefSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReferences")
	ret0, _ := ret[0].([]*cache.CacheRefSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReferences indicates an expected call of ListReferences
func (mr *MockInterfaceMockRecorder) ListReferences() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReferences", reflect.TypeOf((*MockInterface)(nil).ListReferences))
}

// AddManifest mocks base method
func (m *MockInterface) AddManifest(ref *oci.Reference, manifest *v1.Descriptor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddManifest", ref, manifest)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddManifest indicates an expected call of AddManifest
func (mr *MockInterfaceMockRecorder) AddManifest(ref, manifest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddManifest", reflect.TypeOf((*MockInterface)(nil).AddManifest), ref, manifest)
}

// Provider mocks base method
func (m *MockInterface) Provider() content.Provider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provider")
	ret0, _ := ret[0].(content.Provider)
	return ret0
}

// Provider indicates an expected call of Provider
func (mr *MockInterfaceMockRecorder) Provider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provider", reflect.TypeOf((*MockInterface)(nil).Provider))
}

// Ingester mocks base method
func (m *MockInterface) Ingester() content.Ingester {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ingester")
	ret0, _ := ret[0].(content.Ingester)
	return ret0
}

// Ingester indicates an expected call of Ingester
func (mr *MockInterfaceMockRecorder) Ingester() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ingester", reflect.TypeOf((*MockInterface)(nil).Ingester))
}

// ProvideIngester mocks base method
func (m *MockInterface) ProvideIngester() content0.ProvideIngester {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvideIngester")
	ret0, _ := ret[0].(content0.ProvideIngester)
	return ret0
}

// ProvideIngester indicates an expected call of ProvideIngester
func (mr *MockInterfaceMockRecorder) ProvideIngester() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvideIngester", reflect.TypeOf((*MockInterface)(nil).ProvideIngester))
}
